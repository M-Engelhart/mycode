> ANSIBLE.NETCOMMON.NETWORK_CLI    (/home/student/.local/lib/python3.10/site-packages/ansible_collections/ansible/netcommon/plugins/connection/network_cli.py)

        This connection plugin provides a connection to remote devices over the SSH and
        implements a CLI shell.  This connection plugin is typically used by network devices for
        sending and receiving CLi commands to network devices.

ADDED IN: version 1.0.0 of ansible.netcommon

OPTIONS (= is mandatory):

- become
        The become option will instruct the CLI session to attempt privilege escalation on
        platforms that support it.  Normally this means transitioning from user mode to `enable'
        mode in the CLI session. If become is set to True and the remote device does not support
        privilege escalation or the privilege has already been elevated, then this option is
        silently ignored.
        Can be configured from the CLI via the `--become' or `-b' options.
        set_via:
          env:
          - name: ANSIBLE_BECOME
          ini:
          - key: become
            section: privilege_escalation
          vars:
          - name: ansible_become
        default: false
        type: boolean

- become_errors
        This option determines how privilege escalation failures are handled when `become' is
        enabled.
        When set to `ignore', the errors are silently ignored. When set to `warn', a warning
        message is displayed. The default option `fail', triggers a failure and halts execution.
        set_via:
          vars:
          - name: ansible_network_become_errors
        choices: [ignore, warn, fail]
        default: fail
        type: str

- become_method
        This option allows the become method to be specified in for handling privilege
        escalation.  Typically the become_method value is set to `enable' but could be defined
        as other values.
        set_via:
          env:
          - name: ANSIBLE_BECOME_METHOD
          ini:
          - key: become_method
            section: privilege_escalation
          vars:
          - name: ansible_become_method
        default: sudo
        type: string

- host
        Specifies the remote device FQDN or IP address to establish the SSH connection to.
        set_via:
          vars:
          - name: inventory_hostname
          - name: ansible_host
        default: inventory_hostname
        type: string

- host_key_auto_add
        By default, Ansible will prompt the user before adding SSH keys to the known hosts file.
        Since persistent connections such as network_cli run in background processes, the user
        will never be prompted.  By enabling this option, unknown host keys will automatically
        be added to the known hosts file.
        Be sure to fully understand the security implications of enabling this option on
        production systems as it could create a security vulnerability.
        set_via:
          env:
          - name: ANSIBLE_HOST_KEY_AUTO_ADD
          ini:
          - key: host_key_auto_add
            section: paramiko_connection
        default: false
        type: boolean

- host_key_checking
        Set this to "False" if you want to avoid host key checking by the underlying tools
        Ansible uses to connect to the host
        set_via:
          env:
          - name: ANSIBLE_HOST_KEY_CHECKING
          - name: ANSIBLE_SSH_HOST_KEY_CHECKING
          ini:
          - key: host_key_checking
            section: defaults
          - key: host_key_checking
            section: persistent_connection
          vars:
          - name: ansible_host_key_checking
          - name: ansible_ssh_host_key_checking
        default: true
        type: boolean

- import_modules
        Reduce CPU usage and network module execution time by enabling direct execution. Instead
        of the module being packaged and executed by the shell, it will be directly executed by
        the Ansible control node using the same python interpreter as the Ansible process. Note-
        Incompatible with `asynchronous mode'. Note- Python 3 and Ansible 2.9.16 or greater
        required. Note- With Ansible 2.9.x fully qualified modules names are required in tasks.
        set_via:
          env:
          - name: ANSIBLE_NETWORK_IMPORT_MODULES
          ini:
          - key: import_modules
            section: ansible_network
          vars:
          - name: ansible_network_import_modules
        default: true
        type: boolean

- network_cli_retries
        Number of attempts to connect to remote host. The delay time between the retires
        increases after every attempt by power of 2 in seconds till either the maximum attempts
        are exhausted or any of the `persistent_command_timeout' or `persistent_connect_timeout'
        timers are triggered.
        set_via:
          env:
          - name: ANSIBLE_NETWORK_CLI_RETRIES
          ini:
          - key: network_cli_retries
            section: persistent_connection
          vars:
          - name: ansible_network_cli_retries
        default: 3
        type: integer

- network_os
        Configures the device platform network operating system.  This value is used to load the
        correct terminal and cliconf plugins to communicate with the remote device.
        set_via:
          vars:
          - name: ansible_network_os
        default: null
        type: string

- password
        Configures the user password used to authenticate to the remote device when first
        establishing the SSH connection.
        set_via:
          vars:
          - name: ansible_password
          - name: ansible_ssh_pass
          - name: ansible_ssh_password
        default: null
        type: string

- persistent_buffer_read_timeout
        Configures, in seconds, the amount of time to wait for the data to be read from Paramiko
        channel after the command prompt is matched. This timeout value ensures that command
        prompt matched is correct and there is no more data left to be received from remote
        host.
        set_via:
          env:
          - name: ANSIBLE_PERSISTENT_BUFFER_READ_TIMEOUT
          ini:
          - key: buffer_read_timeout
            section: persistent_connection
          vars:
          - name: ansible_buffer_read_timeout
        default: 0.1
        type: float

- persistent_command_timeout
        Configures, in seconds, the amount of time to wait for a command to return from the
        remote device.  If this timer is exceeded before the command returns, the connection
        plugin will raise an exception and close.
        set_via:
          env:
          - name: ANSIBLE_PERSISTENT_COMMAND_TIMEOUT
          ini:
          - key: command_timeout
            section: persistent_connection
          vars:
          - name: ansible_command_timeout
        default: 30
        type: int

- persistent_connect_timeout
        Configures, in seconds, the amount of time to wait when trying to initially establish a
        persistent connection.  If this value expires before the connection to the remote device
        is completed, the connection will fail.
        set_via:
          env:
          - name: ANSIBLE_PERSISTENT_CONNECT_TIMEOUT
          ini:
          - key: connect_timeout
            section: persistent_connection
          vars:
          - name: ansible_connect_timeout
        default: 30
        type: int

- persistent_log_messages
        This flag will enable logging the command executed and response received from target
        device in the ansible log file. For this option to work 'log_path' ansible configuration
        option is required to be set to a file path with write access.
        Be sure to fully understand the security implications of enabling this option as it
        could create a security vulnerability by logging sensitive information in log file.
        set_via:
          env:
          - name: ANSIBLE_PERSISTENT_LOG_MESSAGES
          ini:
          - key: log_messages
            section: persistent_connection
          vars:
          - name: ansible_persistent_log_messages
        default: false
        type: boolean

- port
        Specifies the port on the remote device that listens for connections when establishing
        the SSH connection.
        set_via:
          env:
          - name: ANSIBLE_REMOTE_PORT
          ini:
          - key: remote_port
            section: defaults
          vars:
          - name: ansible_port
        default: 22
        type: int

- private_key_file
        The private SSH key or certificate file used to authenticate to the remote device when
        first establishing the SSH connection.
        set_via:
          env:
          - name: ANSIBLE_PRIVATE_KEY_FILE
          ini:
          - key: private_key_file
            section: defaults
          vars:
          - name: ansible_private_key_file
        default: null
        type: string

- remote_user
        The username used to authenticate to the remote device when the SSH connection is first
        established.  If the remote_user is not specified, the connection will use the username
        of the logged in user.
        Can be configured from the CLI via the `--user' or `-u' options.
        set_via:
          env:
          - name: ANSIBLE_REMOTE_USER
          ini:
          - key: remote_user
            section: defaults
          vars:
          - name: ansible_user
        default: null
        type: string

- single_user_mode
        This option enables caching of data fetched from the target for re-use. The cache is
        invalidated when the target device enters configuration mode.
        Applicable only for platforms where this has been implemented.
        set_via:
          env:
          - name: ANSIBLE_NETWORK_SINGLE_USER_MODE
          vars:
          - name: ansible_network_single_user_mode
        default: false
        type: boolean
        added in: version 2.0.0 of ansible.netcommon


- ssh_type
        The python package that will be used by the `network_cli' connection plugin to create a
        SSH connection to remote host.
        `libssh' will use the ansible-pylibssh package, which needs to be installed in order to
        work.
        `paramiko' will instead use the paramiko package to manage the SSH connection.
        `auto' will use ansible-pylibssh if that package is installed, otherwise will fallback
        to paramiko.
        set_via:
          env:
          - name: ANSIBLE_NETWORK_CLI_SSH_TYPE
          ini:
          - key: ssh_type
            section: persistent_connection
          vars:
          - name: ansible_network_cli_ssh_type
        choices: [libssh, paramiko, auto]
        default: auto
        type: string

- terminal_errors
        This option determines how failures while setting terminal parameters are handled.
        When set to `ignore', the errors are silently ignored. When set to `warn', a warning
        message is displayed. The default option `fail', triggers a failure and halts execution.
        set_via:
          vars:
          - name: ansible_network_terminal_errors
        choices: [ignore, warn, fail]
        default: fail
        type: str
        added in: version 3.1.0 of ansible.netcommon


- terminal_inital_prompt_newline
        This boolean flag, that when set to `True' will send newline in the response if any of
        values in `terminal_initial_prompt' is matched.
        set_via:
          vars:
          - name: ansible_terminal_initial_prompt_newline
        default: true
        type: boolean

- terminal_initial_answer
        The answer to reply with if the `terminal_initial_prompt' is matched. The value can be a
        single answer or a list of answers for multiple terminal_initial_prompt. In case the
        login menu has multiple prompts the sequence of the prompt and excepted answer should be
        in same order and the value of `terminal_prompt_checkall' should be set to `True' if all
        the values in `terminal_initial_prompt' are expected to be matched and set to `False' if
        any one login prompt is to be matched.
        set_via:
          vars:
          - name: ansible_terminal_initial_answer
        default: null
        elements: string
        type: list

- terminal_initial_prompt
        A single regex pattern or a sequence of patterns to evaluate the expected prompt at the
        time of initial login to the remote host.
        set_via:
          vars:
          - name: ansible_terminal_initial_prompt
        default: null
        elements: string
        type: list

- terminal_initial_prompt_checkall
        By default the value is set to `False' and any one of the prompts mentioned in
        `terminal_initial_prompt' option is matched it won't check for other prompts. When set
        to `True' it will check for all the prompts mentioned in `terminal_initial_prompt'
        option in the given order and all the prompts should be received from remote host if not
        it will result in timeout.
        set_via:
          vars:
          - name: ansible_terminal_initial_prompt_checkall
        default: false
        type: boolean

- terminal_stderr_re
        This option provides the regex pattern and optional flags to match the error string from
        the received response chunk. This option accepts `pattern' and `flags' keys. The value
        of `pattern' is a python regex pattern to match the response and the value of `flags' is
        the value accepted by `flags' argument of `re.compile' python method to control the way
        regex is matched with the response, for example `'re.I''.
        set_via:
          vars:
          - name: ansible_terminal_stderr_re
        default: null
        elements: dict
        type: list

- terminal_stdout_re
        A single regex pattern or a sequence of patterns along with optional flags to match the
        command prompt from the received response chunk. This option accepts `pattern' and
        `flags' keys. The value of `pattern' is a python regex pattern to match the response and
        the value of `flags' is the value accepted by `flags' argument of `re.compile' python
        method to control the way regex is matched with the response, for example `'re.I''.
        set_via:
          vars:
          - name: ansible_terminal_stdout_re
        default: null
        elements: dict
        type: list


REQUIREMENTS:  ansible-pylibssh if using `ssh_type=libssh'

AUTHOR: Ansible Networking Team (@ansible-network)

NAME: network_cli
